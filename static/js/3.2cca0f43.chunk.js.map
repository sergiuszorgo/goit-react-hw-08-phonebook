{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/SearchForm/SearchForm.js","views/ContactsView.js"],"names":["module","exports","connect","state","contacts","phonebookSelectors","getFilteredContacts","dispatch","deleteContact","id","phonebookOperations","className","s","ContactBox","Align","length","ContactList","map","name","number","ContactListItem","ContactListName","contBtn","onClick","class","ContactForm","inputChange","e","currentTarget","value","setState","resetForm","checkDublicat","props","some","contact","toLowerCase","pushContact","preventDefault","addContact","alert","formList","type","this","onChange","pattern","title","required","Component","getAllContacts","filter","getFilter","inputForm","changeFilter","htmlFor","ContactsView","getContacts","isLoadingContacts","getLoading"],"mappings":"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","file":"static/js/3.2cca0f43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactBox\":\"ContactList_ContactBox__2F4QI\",\"Align\":\"ContactList_Align__2TCe1\",\"ContactList\":\"ContactList_ContactList__mu41J\",\"ContactListItem\":\"ContactList_ContactListItem__tlRv1\",\"ContactListName\":\"ContactList_ContactListName__pYATk\",\"contBtn\":\"ContactList_contBtn__op8id\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formList\":\"ContactForm_formList__QmTHb\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport { phonebookOperations, phonebookSelectors } from '../../redux/phonebook';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => (\r\n  <div className={s.ContactBox}>\r\n    <h2 className={s.Align}>Contacts: {contacts.length}</h2>\r\n    <ul className={s.ContactList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.ContactListItem}>\r\n          <p className={s.ContactListName}>\r\n            {name}: {number}\r\n          </p>\r\n          <div>\r\n            <button className={s.contBtn} onClick={() => deleteContact(id)}>\r\n              <span class=\"material-icons md-light\">close</span>\r\n            </button>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: phonebookSelectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(phonebookOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: propTypes.array.isRequired,\r\n  deleteContact: propTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport { phonebookOperations, phonebookSelectors } from '../../redux/phonebook';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  // добавление значений в state\r\n  inputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  //   очистка формы\r\n  resetForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  // отправка контакта\r\n\r\n  checkDublicat = name => {\r\n    return this.props.contacts.some(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n  };\r\n  pushContact = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { addContact } = this.props;\r\n    if (this.checkDublicat(this.state.name)) {\r\n      alert(`${name} already present in contacts`);\r\n      return;\r\n    }\r\n    if (name && number) {\r\n      addContact(this.state);\r\n      this.resetForm();\r\n      return;\r\n    }\r\n    alert('Please enter name and phone');\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={s.formList}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.inputChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number:\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.inputChange}\r\n          />\r\n        </label>\r\n        <button onClick={this.pushContact}>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: phonebookSelectors.getAllContacts(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: ({ name, number }) =>\r\n    dispatch(phonebookOperations.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  addContact: propTypes.func,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport propTypes from 'prop-types';\r\n// import s from './SearchForm.module.css';\r\nimport { phonebookSelectors, changeFilter } from '../../redux/phonebook';\r\n\r\nconst SearchForm = ({ filter, inputForm }) => {\r\n  return (\r\n    <section>\r\n      <label htmlFor=\"\">\r\n        Find contact by name{' '}\r\n        <input type=\"text\" name=\"filter\" value={filter} onChange={inputForm} />\r\n      </label>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: phonebookSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  inputForm: e => dispatch(changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\r\n\r\nSearchForm.propTypes = {\r\n  filter: propTypes.string.isRequired,\r\n  inputForm: propTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactList from '../components/ContactList';\r\nimport ContactForm from '../components/ContactForm';\r\nimport SearchForm from '../components/SearchForm';\r\nimport { phonebookOperations, phonebookSelectors } from '../redux/phonebook';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.getContacts();\r\n  }\r\n  render() {\r\n    const { contacts } = this.props;\r\n    return (\r\n      <div>\r\n        <h1 className=\"title\">Phonebook</h1>\r\n        <ContactForm />\r\n        {contacts.length > 1 && <SearchForm />}\r\n        {this.props.isLoadingContacts ? (\r\n          <h1 className=\"Load\">LOADING ...</h1>\r\n        ) : (\r\n          <ContactList />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: phonebookSelectors.getAllContacts(state),\r\n  isLoadingContacts: phonebookSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getContacts: () => dispatch(phonebookOperations.getContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}